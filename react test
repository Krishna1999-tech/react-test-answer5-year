// Question 1: DSA Given an array of integers, return the length of the longest increasing subsequence.A subsequence is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. For example, given the array [10, 9, 2, 5, 3, 7, 101, 18], the longest increasing subsequence is [2, 3, 7, 101], and its length is 4.
function lengthOfLIS(nums) {
  if (!Array.isArray(nums) || nums.length === 0) return 0;
  const dp = Array(nums.length).fill(1);
  for (let i = 1; i < nums.length; i++) {
    for (let j = 0; j < i; j++) {
      if (nums[i] > nums[j]) {
        dp[i] = Math.max(dp[i], dp[j] + 1);
      }
    }
  }
  return Math.max(...dp);
}

// Question 2: DSA Given an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.
For example, given:
const nums = [2, 7, 11, 15];
const target = 9;
The function should return [0, 1] because nums[0] + nums[1] = 2 + 7 = 9.
Requirements:
Implement the solution in JavaScript.
The solution should have a time complexity better than O(n^2).
Include proper error handling for edge cases.

function twoSum(nums, target) {
  const map = new Map();
  for (let i = 0; i < nums.length; i++) {
    const complement = target - nums[i];
    if (map.has(complement)) {
      return [map.get(complement), i];
    }
    map.set(nums[i], i);
  }
  throw new Error("No two sum solution");
}

// Question 3: MongoDB Aggregation Consider a MongoDB collection named sales with documents structured as follows:
json:
{
    "_id": ObjectId("..."),
    "date": ISODate("2024-06-15T00:00:00Z"),
    "store": "Store A",
    "items": [
        {
            "name": "item1",
            "quantity": 5,
            "price": 10.0
        },
        {
            "name": "item2",
            "quantity": 3,
            "price": 20.0
        }
    ]
}
Your task is to write an aggregation pipeline to calculate the total revenue generated by each store for each month, along with the average price of items sold. The result should be sorted first by store and then by month (in ascending order).
The expected output should be something like this:
json:
[
    {
        "store": "Store A",
        "month": "2024-06",
        "totalRevenue": 230.0,
        "averagePrice": 15.0
    },
    {
        "store": "Store B",
        "month": "2024-06",
        "totalRevenue": 150.0,
        "averagePrice": 12.5
    }
]


const salesAggregationPipeline = [
  { $addFields: { month: { $dateToString: { format: '%Y-%m', date: '$date' } } } },
  { $unwind: '$items' },
  {
    $group: {
      _id: { store: '$store', month: '$month' },
      totalRevenue: { $sum: { $multiply: ['$items.quantity', '$items.price'] } },
      averagePrice: { $avg: '$items.price' }
    }
  },
  {
    $project: {
      _id: 0,
      store: '$_id.store',
      month: '$_id.month',
      totalRevenue: 1,
      averagePrice: 1
    }
  },
  { $sort: { store: 1, month: 1 } }
];

// Question 4: React Build a Dynamic To-Do List Application in React.
Objective:
Create a React application that allows users to manage a to-do list with the following features:
Add new tasks
Mark tasks as complete
Delete tasks
Filter tasks by all, completed, and pending
Persist tasks in the local storage so that they are retained after a page refresh
Requirements:
1.UI Components:
oCreate a TodoApp component as the main component.
oCreate a TodoList component to display the list of tasks.
oCreate a TodoItem component to represent each task.
oCreate an AddTodo component for adding new tasks.
oCreate a Filter component to filter tasks.
2.State Management:
oUse the useState and useEffect hooks for state management.
oUse local storage to persist the tasks.
3.Functionality:
oAdd a new task with a text input.
oMark a task as complete/incomplete by clicking on it.
oDelete a task.
oFilter tasks by all, completed, and pending.
oPersist tasks in local storage.
PS - You may use this API for the todo app - https://dummyjson.com/docs/todos#todos-a
// Backend (Node.js + Express + MongoDB)



const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');

const app = express();
const PORT = 5000;

app.use(cors());
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/todoApp', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const taskSchema = new mongoose.Schema({
  text: String,
  completed: Boolean,
});

const Task = mongoose.model('Task', taskSchema);

// API Endpoints
app.get('/tasks', async (req, res) => {
  const tasks = await Task.find();
  res.json(tasks);
});

app.post('/tasks', async (req, res) => {
  const newTask = new Task(req.body);
  await newTask.save();
  res.status(201).json(newTask);
});

app.put('/tasks/:id', async (req, res) => {
  const updatedTask = await Task.findByIdAndUpdate(req.params.id, req.body, { new: true });
  res.json(updatedTask);
});

app.delete('/tasks/:id', async (req, res) => {
  await Task.findByIdAndDelete(req.params.id);
  res.sendStatus(204);
});

app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));

// Frontend (React)
import React, { useEffect, useState } from 'react';
import axios from 'axios';

function App() {
  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState('');
  const [filter, setFilter] = useState('all');

  useEffect(() => {
    axios.get('http://localhost:5000/tasks').then((res) => setTasks(res.data));
  }, []);

  const addTask = async () => {
    if (!newTask.trim()) return;
    const { data } = await axios.post('http://localhost:5000/tasks', { text: newTask, completed: false });
    setTasks([...tasks, data]);
    setNewTask('');
  };

  const toggleTask = async (id) => {
    const task = tasks.find((t) => t._id === id);
    const { data } = await axios.put(`http://localhost:5000/tasks/${id}`, { ...task, completed: !task.completed });
    setTasks(tasks.map((t) => (t._id === id ? data : t)));
  };

  const deleteTask = async (id) => {
    await axios.delete(`http://localhost:5000/tasks/${id}`);
    setTasks(tasks.filter((t) => t._id !== id));
  };

  const filteredTasks = tasks.filter((task) =>
    filter === 'all' ? true : filter === 'completed' ? task.completed : !task.completed
  );

  return (
    <div className="todo-app">
      <h1>Todo List</h1>
      <input
        value={newTask}
        onChange={(e) => setNewTask(e.target.value)}
        placeholder="Add new task"
      />
      <button onClick={addTask}>Add</button>
      <div>
        {['all', 'completed', 'pending'].map((f) => (
          <button key={f} onClick={() => setFilter(f)} className={filter === f ? 'active' : ''}>
            {f}
          </button>
        ))}
      </div>
      <ul>
        {filteredTasks.map((task) => (
          <li key={task._id} className={task.completed ? 'completed' : ''}>
            <span onClick={() => toggleTask(task._id)}>{task.text}</span>
            <button onClick={() => deleteTask(task._id)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default App;
